// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String?
    provider                 String?
    providerAccountId        String?
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    ext_expires_in           Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String
    gender        String?
    birthday      DateTime?
    email         String?      @unique
    role          String?
    id_RFID       String?      @unique
    lastRequest   DateTime     @default(now())
    rfid          RFID?        @relation(fields: [id_RFID], references: [id_RFID])
    sesiones      Sesion[]
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Preferences   Preferences?
    Logs          Log[]
}

model RFID {
    id_RFID    String   @id
    user       User?
    active     Boolean  @default(false)
    detections Int      @default(1)
    updatedAt  DateTime @default(now()) @updatedAt
}

model Sesion {
    id_sesion        String            @id @default(cuid())
    id_user          String
    user             User              @relation(fields: [id_user], references: [id])
    sesionStart      DateTime          @default(now())
    sesionEnd        DateTime?
    LightConsumption LightConsumption?
    Temperatures     Temperature[]
    WorkingTime      WorkingTime?
}

model Preferences {
    id_user      String @id
    user         User   @relation(fields: [id_user], references: [id])
    temp_val_min Float
    temp_val_max Float
}

model Temperature {
    id_temperature  String   @id @default(cuid())
    temp_registered Float
    id_sesion       String?
    createdAt       DateTime @default(now())
    sesion          Sesion?  @relation(fields: [id_sesion], references: [id_sesion])
}

model LightConsumption {
    id_light   String  @id @default(cuid())
    id_sesion  String? @unique
    sesion     Sesion? @relation(fields: [id_sesion], references: [id_sesion])
    lightAfter String?
}

model Movement {
    id_movement   String   @id @default(cuid())
    triggerTime   DateTime @default(now())
    duringSession Boolean
}

model Device {
    connectionId String  @id
    name         String? @unique
    type         String?
    stage        String
    domain       String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WorkingTime {
    id_time   String  @id @default(cuid())
    workTime  Float
    id_sesion String? @unique
    sesion    Sesion? @relation(fields: [id_sesion], references: [id_sesion])
}

model Log {
    id_log    String   @id @default(cuid())
    createdAt DateTime @default(now())
    code      String   @default("INFO")
    message   String
    id_user   String?
    user      User?    @relation(fields: [id_user], references: [id])
}

model Admin {
    email String @unique
}

model paidUser {
    email String @unique
}
